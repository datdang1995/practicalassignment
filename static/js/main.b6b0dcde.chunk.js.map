{"version":3,"sources":["components/TemperatureInput.jsx","components/BoilingVerdict.jsx","components/Calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["TemperatureInput","handleChange","e","props","onTemperatureChange","target","value","temperature","this","scale","c","f","type","onChange","Component","BoilingVerdict","celsius","Calculator","handleCelsiusChange","setState","handleFahrenheitChange","state","tryConvert","fahrenheit","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAEqBA,E,2MACnBC,aAAe,SAAAC,GAAC,OAAI,EAAKC,MAAMC,oBAAoBF,EAAEG,OAAOC,Q,wEAG1D,IAAMC,EAAcC,KAAKL,MAAMI,YACzBE,EAAQD,KAAKL,MAAMM,MAOzB,OACE,kCACE,wDAPe,CACjBC,EAAG,UACHC,EAAG,cAKwCF,GAAzC,KACA,2BAAOG,KAAK,SAASN,MAAOC,EAAaM,SAAUL,KAAKP,oB,GAflBa,aCA/B,SAASC,EAAeZ,GACrC,OAAIA,EAAMa,SAAW,IACZ,+CAEF,+C,ICFYC,E,YACnB,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAORe,oBAAsB,SAAAX,GAAW,OAC/B,EAAKY,SAAS,CAAEZ,cAAaE,MAAO,OATnB,EAWnBW,uBAAyB,SAAAb,GAAW,OAClC,EAAKY,SAAS,CAAEZ,cAAaE,MAAO,OAVpC,EAAKY,MAAQ,CACXd,YAAa,GACbE,MAAO,KAJQ,E,sEAejB,IAAMA,EAAQD,KAAKa,MAAMZ,MACnBF,EAAcC,KAAKa,MAAMd,YACzBS,EACM,MAAVP,EAAgBa,EAAWf,GAI7B,SAAmBgB,GACjB,OAA4B,GAAnBA,EAAa,IAAW,KALoBhB,EACjDgB,EACM,MAAVd,EAAgBa,EAAWf,GAM7B,SAAsBS,GACpB,OAAkB,EAAVA,EAAe,EAAI,MAP6BT,EAU1D,SAASe,EAAWf,EAAaiB,GAC/B,IAAMC,EAAQC,WAAWnB,GACzB,GAAIoB,OAAOC,MAAMH,GACf,MAAO,GAGT,IAAMI,EAASL,EAAQC,GAEvB,OADgBK,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,WAGjB,OACE,6BACE,kBAAC,EAAD,CACEvB,MAAM,IACNF,YAAaS,EACbZ,oBAAqBI,KAAKU,sBAE5B,kBAAC,EAAD,CACET,MAAM,IACNF,YAAagB,EACbnB,oBAAqBI,KAAKY,yBAE5B,kBAACL,EAAD,CAAgBC,QAASU,WAAWV,U,GAtDJF,aCSzBmB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b6b0dcde.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class TemperatureInput extends Component {\r\n  handleChange = e => this.props.onTemperatureChange(e.target.value);\r\n\r\n  render() {\r\n    const temperature = this.props.temperature;\r\n    const scale = this.props.scale;\r\n\r\n    const scaleNames = {\r\n      c: \"Celsius\",\r\n      f: \"Fahrenheit\"\r\n    };\r\n\r\n    return (\r\n      <fieldset>\r\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\r\n        <input type=\"number\" value={temperature} onChange={this.handleChange} />\r\n      </fieldset>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function BoilingVerdict(props) {\r\n  if (props.celsius >= 100) {\r\n    return <p>Shits is boiling</p>;\r\n  }\r\n  return <p>Shits won't boil</p>;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TemperatureInput from \"./TemperatureInput\";\r\nimport BoilingVerdict from \"./BoilingVerdict\";\r\n\r\nexport default class Calculator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      temperature: \"\",\r\n      scale: \"c\"\r\n    };\r\n  }\r\n\r\n  handleCelsiusChange = temperature =>\r\n    this.setState({ temperature, scale: \"c\" });\r\n\r\n  handleFahrenheitChange = temperature =>\r\n    this.setState({ temperature, scale: \"f\" });\r\n\r\n  render() {\r\n    const scale = this.state.scale;\r\n    const temperature = this.state.temperature;\r\n    const celsius =\r\n      scale === \"f\" ? tryConvert(temperature, toCelsius) : temperature;\r\n    const fahrenheit =\r\n      scale === \"c\" ? tryConvert(temperature, toFahrenheit) : temperature;\r\n\r\n    function toCelsius(fahrenheit) {\r\n      return ((fahrenheit - 32) * 5) / 9;\r\n    }\r\n\r\n    function toFahrenheit(celsius) {\r\n      return (celsius * 9) / 5 + 32;\r\n    }\r\n\r\n    function tryConvert(temperature, convert) {\r\n      const input = parseFloat(temperature);\r\n      if (Number.isNaN(input)) {\r\n        return \"\";\r\n      }\r\n\r\n      const output = convert(input);\r\n      const rounded = Math.round(output * 1000) / 1000;\r\n      return rounded.toString();\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <TemperatureInput\r\n          scale=\"c\"\r\n          temperature={celsius}\r\n          onTemperatureChange={this.handleCelsiusChange}\r\n        />\r\n        <TemperatureInput\r\n          scale=\"f\"\r\n          temperature={fahrenheit}\r\n          onTemperatureChange={this.handleFahrenheitChange}\r\n        />\r\n        <BoilingVerdict celsius={parseFloat(celsius)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Calculator from \"./components/Calculator\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}