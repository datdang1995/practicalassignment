{"version":3,"sources":["components/SearchBar.jsx","components/ProductCategoryRow.jsx","components/ProductRow.jsx","components/ProductTable.jsx","components/FilterableProductTable.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","handleTextChange","e","props","onTextChange","target","value","handleStokeChange","onStokeChange","checked","filterText","this","text","inStoke","stoke","type","onChange","placeholder","id","htmlFor","Component","ProductCategoryRow","category","colSpan","ProductRow","name","product","stocked","style","color","price","ProductTable","rows","lastCategory","products","forEach","indexOf","push","key","FilterableProductTable","setState","state","data","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"szBAEqBA,E,2MACnBC,iBAAmB,SAAAC,GAAC,OAAI,EAAKC,MAAMC,aAAaF,EAAEG,OAAOC,Q,EAEzDC,kBAAoB,SAAAL,GAAC,OAAI,EAAKC,MAAMK,cAAcN,EAAEG,OAAOI,U,wEAGzD,IAAIC,EAAaC,KAAKR,MAAMS,KACxBC,EAAUF,KAAKR,MAAMW,MACzB,OACE,8BACE,2BACER,MAAOI,EACPK,KAAK,OACLC,SAAUL,KAAKV,iBACfgB,YAAY,cAEd,2BACE,2BACEF,KAAK,WACLC,SAAUL,KAAKJ,kBACfE,QAASI,EACTK,GAAG,WAEL,2BAAOC,QAAQ,UAAf,qC,GAvB6BC,aCAxB,SAASC,EAAmBlB,GACzC,IAAMmB,EAAWnB,EAAMmB,SACvB,OACE,4BACE,wBAAIC,QAAQ,KAAKD,ICJR,SAASE,EAAWrB,GACjC,IAAMsB,EAAOtB,EAAMuB,QAAQC,QACzBxB,EAAMuB,QAAQD,KAEd,0BAAMG,MAAO,CAAEC,MAAO,QAAU1B,EAAMuB,QAAQD,MAEhD,OACE,4BACE,4BAAKA,GACL,4BAAKtB,EAAMuB,QAAQI,Q,ICPJC,E,iLAEjB,IAAMC,EAAO,GACTC,EAAe,KAEbvB,EAAaC,KAAKR,MAAMS,KACxBC,EAAUF,KAAKR,MAAMW,MAoB3B,OAlBAH,KAAKR,MAAM+B,SAASC,SAAQ,SAAAT,IAEgB,IAAtCA,EAAQD,KAAKW,QAAQ1B,KAErBG,IAAYa,EAAQC,UACpBD,EAAQJ,WAAaW,GACvBD,EAAKK,KACH,kBAAChB,EAAD,CACEC,SAAUI,EAAQJ,SAClBgB,IAAKZ,EAAQJ,YAKnBU,EAAKK,KAAK,kBAACb,EAAD,CAAYE,QAASA,EAASY,IAAKZ,EAAQD,QAErDQ,EAAeP,EAAQJ,cAGvB,+BACE,+BACE,4BACE,oCACA,uCAGJ,+BAAQU,Q,GAlC0BZ,aCCrBmB,E,YACnB,WAAYpC,GAAQ,IAAD,8BACjB,4CAAMA,KAORF,iBAAmB,SAAAW,GAAI,OAAI,EAAK4B,SAAS,CAAE9B,WAAYE,KARpC,EAUnBL,kBAAoB,SAAAO,GAAK,OAAI,EAAK0B,SAAS,CAAE3B,QAASC,KARpD,EAAK2B,MAAQ,CACX/B,WAAY,GACZG,SAAS,GAJM,E,sEAajB,OACE,oCACE,kBAAC,EAAD,CACED,KAAMD,KAAK8B,MAAM/B,WACjBI,MAAOH,KAAK8B,MAAM5B,QAClBT,aAAcO,KAAKV,iBACnBO,cAAeG,KAAKJ,oBAEtB,kBAAC,EAAD,CACE2B,SAAUQ,EACV9B,KAAMD,KAAK8B,MAAM/B,WACjBI,MAAOH,KAAK8B,MAAM5B,e,GAzBwBO,aCOrCuB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48519a22.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class SearchBar extends Component {\r\n  handleTextChange = e => this.props.onTextChange(e.target.value);\r\n\r\n  handleStokeChange = e => this.props.onStokeChange(e.target.checked);\r\n\r\n  render() {\r\n    let filterText = this.props.text;\r\n    let inStoke = this.props.stoke;\r\n    return (\r\n      <form>\r\n        <input\r\n          value={filterText}\r\n          type=\"text\"\r\n          onChange={this.handleTextChange}\r\n          placeholder=\"Search...\"\r\n        />\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.handleStokeChange}\r\n            checked={inStoke}\r\n            id=\"filter\"\r\n          />\r\n          <label htmlFor=\"filter\">Only show products in stock</label>\r\n        </p>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ProductCategoryRow(props) {\r\n  const category = props.category;\r\n  return (\r\n    <tr>\r\n      <th colSpan=\"2\">{category}</th>\r\n    </tr>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ProductRow(props) {\r\n  const name = props.product.stocked ? (\r\n    props.product.name\r\n  ) : (\r\n    <span style={{ color: \"red\" }}>{props.product.name}</span>\r\n  );\r\n  return (\r\n    <tr>\r\n      <td>{name}</td>\r\n      <td>{props.product.price}</td>\r\n    </tr>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ProductCategoryRow from \"./ProductCategoryRow\";\r\nimport ProductRow from \"./ProductRow\";\r\n\r\nexport default class ProductTable extends Component {\r\n  render() {\r\n    const rows = [];\r\n    let lastCategory = null;\r\n\r\n    const filterText = this.props.text;\r\n    const inStoke = this.props.stoke;\r\n\r\n    this.props.products.forEach(product => {\r\n      // no items found\r\n      if (product.name.indexOf(filterText) === -1) return;\r\n      //\r\n      if (inStoke && !product.stocked) return;\r\n      if (product.category !== lastCategory) {\r\n        rows.push(\r\n          <ProductCategoryRow\r\n            category={product.category}\r\n            key={product.category}\r\n          />\r\n        );\r\n      }\r\n\r\n      rows.push(<ProductRow product={product} key={product.name} />);\r\n\r\n      lastCategory = product.category;\r\n    });\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Price</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{rows}</tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport data from \"../data.json\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport ProductTable from \"./ProductTable\";\r\n\r\nexport default class FilterableProductTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterText: \"\",\r\n      inStoke: false\r\n    };\r\n  }\r\n\r\n  handleTextChange = text => this.setState({ filterText: text });\r\n\r\n  handleStokeChange = stoke => this.setState({ inStoke: stoke });\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <SearchBar\r\n          text={this.state.filterText}\r\n          stoke={this.state.inStoke}\r\n          onTextChange={this.handleTextChange}\r\n          onStokeChange={this.handleStokeChange}\r\n        />\r\n        <ProductTable\r\n          products={data}\r\n          text={this.state.filterText}\r\n          stoke={this.state.inStoke}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport FilterableProductTable from \"./components/FilterableProductTable\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <FilterableProductTable />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}